package main

import (
	"log"
	"os"
	"reflect"
	"text/template"
	"time"

	"golang.org/x/text/cases"
	"golang.org/x/text/language"
)

func Generator(fileName string, types []reflect.Type) {
	file, err := os.Create(fileName + ".go")
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	genTemplate.Execute(file, struct {
		Timestamp time.Time
		Types     []reflect.Type
	}{
		Timestamp: time.Now(),
		Types:     types,
	})
}

var funcsMap = template.FuncMap{
	"ToTitle": cases.Title(language.English).String,
}

var genTemplate = template.Must(template.New("").Funcs(funcsMap).Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated at
// {{ .Timestamp }}
package goo
{{ println }}
{{- range .Types }}
type {{ .Name | ToTitle }} {{ .Name }}
{{- end }}

{{- range .Types }}

func From{{ .Name | ToTitle }}(n {{ .Name }}) {{ .Name | ToTitle }} {
	return {{ .Name | ToTitle }}(n)
}

// To{{ .Name | ToTitle }} converts instance to builtin {{ .Name }}
func (n {{ .Name | ToTitle }}) To{{ .Name | ToTitle }}() {{ .Name }} {
	return {{ .Name }}(n)
}
{{- end }}
`))
