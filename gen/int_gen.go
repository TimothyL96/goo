//go:build ignore
// +build ignore

package main

import (
	"log"
	"os"
	"reflect"
	"strings"
	"text/template"
	"time"
)

func main() {
	file, err := os.Create("int.go")
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	intTypes := []reflect.Type{reflect.TypeOf((*int)(nil)).Elem(),
		reflect.TypeOf((*int8)(nil)).Elem(),
		reflect.TypeOf((*int16)(nil)).Elem(),
		reflect.TypeOf((*int32)(nil)).Elem(),
		reflect.TypeOf((*int64)(nil)).Elem(),
		reflect.TypeOf((*uint)(nil)).Elem(),
		reflect.TypeOf((*uint8)(nil)).Elem(),
		reflect.TypeOf((*uint16)(nil)).Elem(),
		reflect.TypeOf((*uint32)(nil)).Elem(),
		reflect.TypeOf((*uint64)(nil)).Elem(),
		reflect.TypeOf((*uintptr)(nil)).Elem(),
	}

	genTemplate.Execute(file, struct {
		Timestamp time.Time
		IntTypes  []reflect.Type
	}{
		Timestamp: time.Now(),
		IntTypes:  intTypes,
	})
}

var funcsMap = template.FuncMap{
	"ToTitle": strings.Title,
}

var genTemplate = template.Must(template.New("").Funcs(funcsMap).Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated at
// {{ .Timestamp }}
package goo
{{ println }}
{{- range .IntTypes }}
type {{ .Name | ToTitle }} {{ .Name }}
{{- end }}

{{- range .IntTypes }}

func From{{ .Name | ToTitle }}(n {{ .Name }}) {{ .Name | ToTitle }} {
	return {{ .Name | ToTitle }}(n)
}

// To{{ .Name | ToTitle }} converts instance to builtin {{ .Name }}
func (n *{{ .Name | ToTitle }}) To{{ .Name | ToTitle }}() {{ .Name }} {
	return {{ .Name }}(*n)
}
{{- end }}
`))
